name: CI

env:
  GO_VERSION: '1.24'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            teamhub:
              - 'teamhub/**'
            coursemaker:
              - 'coursemaker/**'
            coursereader:
              - 'coursereader/**'
            roadbuilder:
              - 'roadbuilder/**'
            skilltracker:
              - 'skilltracker/**'
            searchengine:
              - 'searchengine/**'
      - id: set-matrix
        run: |
          # Собираем имена сервисов в массив
          services=()
          if [ "${{ steps.filter.outputs.teamhub }}"    = 'true' ]; then services+=('"teamhub"');    fi
          if [ "${{ steps.filter.outputs.coursemaker }}" = 'true' ]; then services+=('"coursemaker"'); fi
          if [ "${{ steps.filter.outputs.coursereader }}"= 'true' ]; then services+=('"coursereader"');fi
          if [ "${{ steps.filter.outputs.roadbuilder }}" = 'true' ]; then services+=('"roadbuilder"'); fi
          if [ "${{ steps.filter.outputs.skilltracker }}"= 'true' ]; then services+=('"skilltracker"');fi
          if [ "${{ steps.filter.outputs.searchengine }}"= 'true' ]; then services+=('"searchengine"');fi
          # Формируем JSON-массив, даже если пустой
          json="["
          json+=$(IFS=,; echo "${services[*]}")
          json+="]"
          echo "services=$json" >> $GITHUB_OUTPUT
        shell: bash

  # 2) LINT
  lint:
    needs: detect_changes
    if: ${{ fromJson(needs.detect_changes.outputs.services) != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - name: Lint ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          golangci-lint run \
            --config .golangci.yml \
            --out-format colored-line-number

  test:
    needs: detect_changes
    if: ${{ fromJson(needs.detect_changes.outputs.services) != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Test ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          go test ./...

  build:
    needs: [lint, test]
    if: ${{ fromJson(needs.detect_changes.outputs.services) != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          go build -o bin/${{ matrix.service }} .
